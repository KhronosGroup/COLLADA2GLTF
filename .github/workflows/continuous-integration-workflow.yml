name: CI
on: [push, pull_request]

jobs:
  build-windows:
    name: build-windows
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0

    - name: Run cmake
      run: |
        cd ${{ github.workspace }}
        mkdir build
        cd build
        cmake .. -Dtest=ON

    - name: Build
      run: |
        cd build
        MSBuild.exe COLLADA2GLTF.sln /property:Configuration=Release

    - name: Run unit tests
      run: |
        build/Release/COLLADA2GLTF-test.exe
        build/GLTF/Release/GLTF-test.exe

    - name: Upload built executable
      uses: actions/upload-artifact@v1
      with:
        name: COLLADA2GLTF-windows.exe
        path: ./build/Release/COLLADA2GLTF-bin.exe

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.get_version.outputs.VERSION }}
        body: |
          Release ${{ steps.get_version.outputs.VERSION }} ${{ steps.date.outputs.date }}
        draft: false
        prerelease: false

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/Release/COLLADA2GLTF.exe
        asset_name: COLLADA2GLTF-windows-${{ steps.get_version.outputs.VERSION }}.exe
        asset_content_type: application/vnd.microsoft.portable-executable

  build-linux:
    name: build-linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: 8

    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    - name: Run cmake
      run: |
        cd ${{ github.workspace }}
        mkdir build
        cd build
        cmake .. -Dtest=ON

    - name: Build
      run: |
        cd build
        make
    
    - name: Run unit tests
      run: |
        cd build
        make test

    - name: Run integration tests
      run: |
        cd test/js
        npm install
        npm run test
      
    - name: Upload built executable
      uses: actions/upload-artifact@v1
      with:
        name: COLLADA2GLTF-linux
        path: ./build/COLLADA2GLTF-bin

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.get_version.outputs.VERSION }}
        body: |
          Release ${{ steps.get_version.outputs.VERSION }} ${{ steps.date.outputs.date }}
        draft: false
        prerelease: false

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/COLLADA2GLTF-bin
        asset_name: COLLADA2GLTF-linux-${{ steps.get_version.outputs.VERSION }}
        asset_content_type: application/octet-stream

  build-osx:
    name: build-osx
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    - name: Run cmake
      run: |
        cd ${{ github.workspace }}
        mkdir build
        cd build
        cmake .. -Dtest=ON

    - name: Build
      run: |
        cd build
        make
    
    - name: Run unit tests
      run: |
        cd build
        make test
      
    - name: Upload built executable
      uses: actions/upload-artifact@v1
      with:
        name: COLLADA2GLTF-osx
        path: ./build/COLLADA2GLTF-bin

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Get version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.get_version.outputs.VERSION }}
        body: |
          Release ${{ steps.get_version.outputs.VERSION }} ${{ steps.date.outputs.date }}
        draft: false
        prerelease: false

    - if: startsWith(github.ref, 'refs/tags/')  # Release step, only runs on tag builds
      name: (Release) Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/COLLADA2GLTF-bin
        asset_name: COLLADA2GLTF-osx-${{ steps.get_version.outputs.VERSION }}
        asset_content_type: application/octet-stream
